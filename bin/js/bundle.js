var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**This class is automatically generated by LayaAirIDE, please do not make any modifications. */
const Game_1 = require("./script/Game");
const Ball_1 = require("./script/Ball");
const GameControl_1 = require("./script/GameControl");
const Player_1 = require("./script/Player");
/*
* 游戏初始化配置;
*/
class GameConfig {
    constructor() { }
    static init() {
        var reg = Laya.ClassUtils.regClass;
        reg("script/Game.ts", Game_1.default);
        reg("script/Ball.ts", Ball_1.default);
        reg("script/GameControl.ts", GameControl_1.default);
        reg("script/Player.ts", Player_1.default);
    }
}
GameConfig.width = 1136;
GameConfig.height = 640;
GameConfig.scaleMode = "fixedauto";
GameConfig.screenMode = "horizontal";
GameConfig.alignV = "top";
GameConfig.alignH = "left";
GameConfig.startScene = "game/Game.scene";
GameConfig.sceneRoot = "";
GameConfig.debug = false;
GameConfig.stat = true;
GameConfig.physicsDebug = false;
GameConfig.exportSceneToJson = true;
exports.default = GameConfig;
GameConfig.init();

},{"./script/Ball":3,"./script/Game":4,"./script/GameControl":5,"./script/Player":6}],2:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const GameConfig_1 = require("./GameConfig");
class Main {
    constructor() {
        //根据IDE设置初始化引擎		
        if (window["Laya3D"])
            Laya3D.init(GameConfig_1.default.width, GameConfig_1.default.height);
        else
            Laya.init(GameConfig_1.default.width, GameConfig_1.default.height, Laya["WebGL"]);
        Laya["Physics"] && Laya["Physics"].enable();
        Laya["DebugPanel"] && Laya["DebugPanel"].enable();
        Laya.stage.scaleMode = GameConfig_1.default.scaleMode;
        Laya.stage.screenMode = GameConfig_1.default.screenMode;
        //兼容微信不支持加载scene后缀场景
        Laya.URL.exportSceneToJson = GameConfig_1.default.exportSceneToJson;
        //打开调试面板（通过IDE设置调试模式，或者url地址增加debug=true参数，均可打开调试面板）
        if (GameConfig_1.default.debug || Laya.Utils.getQueryString("debug") == "true")
            Laya.enableDebugPanel();
        if (GameConfig_1.default.physicsDebug && Laya["PhysicsDebugDraw"])
            Laya["PhysicsDebugDraw"].enable();
        if (GameConfig_1.default.stat)
            Laya.Stat.show();
        Laya.alertGlobalError = true;
        //激活资源版本控制，version.json由IDE发布功能自动生成，如果没有也不影响后续流程
        Laya.ResourceVersion.enable("version.json", Laya.Handler.create(this, this.onVersionLoaded), Laya.ResourceVersion.FILENAME_VERSION);
    }
    onVersionLoaded() {
        //激活大小图映射，加载小图的时候，如果发现小图在大图合集里面，则优先加载大图合集，而不是小图
        Laya.AtlasInfoManager.enable("fileconfig.json", Laya.Handler.create(this, this.onConfigLoaded));
    }
    onConfigLoaded() {
        //加载IDE指定的场景
        GameConfig_1.default.startScene && Laya.Scene.open(GameConfig_1.default.startScene);
    }
}
//激活启动类
new Main();

},{"./GameConfig":1}],3:[function(require,module,exports){
'use strict';
Object.defineProperty(exports, "__esModule", { value: true });
const Game_1 = require("./Game");
const initialPositionWhite = new Laya.Point(140, 208);
/**
 * 子弹脚本，实现子弹飞行逻辑及对象池回收机制
 */
class Ball extends Laya.Script {
    constructor() {
        super();
        this.isInitialized = false;
    }
    onEnable() {
        if (!this.isInitialized) {
            // 测试时候没有皮肤, 用的白球 + 数字
            // if (this.number) {
            //     const label: Laya.Label = this.owner.getChildByName('label') as Laya.Label;
            //     label.text = `${this.number}`;
            // }
            Object.defineProperty(this.owner, 'startMove', {
                enumerable: false,
                value(xForce, yForce) {
                    var rig = this.getComponent(Laya.RigidBody);
                    rig.setVelocity({ x: xForce, y: yForce });
                    // 因为 game 里是个定时器, 所以存在刚点白球的时候连击可以多次击球的问题
                    Game_1.default.instance.isBallRunning = true;
                },
            });
            this.isInitialized = true;
        }
    }
    onDisable() { }
    onUpdate() {
        const owner = this.owner;
        const { x, y } = owner;
        const { startX, startY, endX, endY, middle, middleLeft, middleRight } = Game_1.default.instance.getCollisionCoordinate();
        const rig = this.owner.getComponent(Laya.RigidBody);
        const { x: currentX, y: currentY } = rig.linearVelocity;
        // 球最后零点几的位移基本看不出来了, 这时候再继续等待实在是太智障了
        if (3 > x && -3 < x && 3 > y && -3 < y) {
            // 因为这个都是碰撞操作, 所以一般不太可能出现非线性降速, 应该都能触发这个东西
            if (0 !== x && 0 !== y) {
                rig.setVelocity({ x: 0, y: 0, });
                // if (Game.instance.ballRunning[this.number]) {
                //     Game.instance.ballRunning[this.number] = false;
                // }
            }
        }
        else {
            // 只有是非动状态才会置为动
            // if (!Game.instance.ballRunning[this.number]) {
            //     Game.instance.ballRunning[this.number] = true;
            // }
        }
        if (x < startX) {
            if (y < startY) {
                if (22 > Math.sqrt(Math.pow(x, 2) + Math.pow(y, 2))) {
                    console.log('左上洞');
                    this.handlerGoal();
                }
            }
            else if (y > endY) {
                if (22 > Math.sqrt((Math.pow((22 - (startX - x)), 2)) +
                    (Math.pow((22 - (y - endY)), 2)))) {
                    console.log('左下洞');
                    this.handlerGoal();
                }
            }
        }
        else if (x > endX) {
            if (y < startY) {
                if (22 > Math.sqrt((Math.pow((22 - (x - endX)), 2)) +
                    (Math.pow((22 - (startY - y)), 2)))) {
                    console.log('右上洞');
                    this.handlerGoal();
                }
            }
            else if (y > endY) {
                if (22 > Math.sqrt((Math.pow((22 - (x - endX)), 2)) +
                    (Math.pow((22 - (y - endY)), 2)))) {
                    console.log('右下洞');
                    this.handlerGoal();
                }
            }
        }
        else if (y < startY) {
            if (x > middleLeft && x < middleRight) {
                if (22 > Math.sqrt((Math.pow((x - middle), 2)) +
                    (Math.pow((22 - (startY - y)), 2)))) {
                    console.log('中上洞');
                    this.handlerGoal();
                }
            }
        }
        else if (y > endY) {
            if (x > middleLeft && x < middleRight) {
                if (22 > Math.sqrt((Math.pow((x - middle), 2)) +
                    (Math.pow((22 - (y - endY)), 2)))) {
                    console.log('中下洞');
                    this.handlerGoal();
                }
            }
        }
        // 其他情况就是在桌子中间了
    }
    handlerGoal() {
        // if (0 === this.number) {
        //     console.log('白球进了');
        //     (this.owner as Laya.Sprite).pos(initialPositionWhite.x, initialPositionWhite.y);
        // } else {
        //     console.log('进球！', this.number);
        //     // TODO 要计算下下方计分区位置在哪
        //     this.owner.removeSelf();
        //     const containerGoal = Game.instance.container_goal.addChild(this.owner);
        // }
        // Game.instance.event('ball.goal', this.number);
        Game_1.default.instance.handlerGoal(this.number);
    }
}
exports.default = Ball;

},{"./Game":4}],4:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const layaMaxUI_1 = require("./../ui/layaMaxUI");
const GameControl_1 = require("./GameControl");
class Game extends layaMaxUI_1.ui.game.GameUI {
    constructor() {
        super();
        // ballRunning: { [key: string]: boolean } = {
        //     0: false,
        //     1: false,
        //     2: false,
        //     3: false,
        //     4: false,
        //     5: false,
        //     6: false,
        //     7: false,
        //     8: false,
        //     9: false,
        //     10: false,
        //     11: false,
        //     12: false,
        //     13: false,
        //     14: false,
        //     15: false,
        // };
        this._ballsRigid = {
            0: undefined,
            1: undefined,
            2: undefined,
            3: undefined,
            4: undefined,
            5: undefined,
            6: undefined,
            7: undefined,
            8: undefined,
            9: undefined,
            10: undefined,
            11: undefined,
            12: undefined,
            13: undefined,
            14: undefined,
            15: undefined,
        };
        this._isBallRunning = false;
        Game.instance = this;
    }
    /**
     * 这个 get set 写的有点傻, 本来以为只需要写 get 的
     */
    get isBallRunning() {
        return this._isBallRunning;
    }
    set isBallRunning(val) {
        this._isBallRunning = val;
    }
    onEnable() {
        this._control = this.getComponent(GameControl_1.default);
        this._containerGoal = this.getChildByName('container_goal');
        const containerBall = this._containerBall = this.getChildByName('container_ball');
        this._startX = 0;
        this._startY = 0;
        this._endX = containerBall.width;
        this._endY = containerBall.height;
        this._middle = containerBall.width / 2;
        this._middleLeft = containerBall.width / 2 - 22;
        this._middleRight = containerBall.width / 2 + 22;
        this._startX += 22;
        this._startY += 22;
        this._endX -= 22;
        this._endY -= 22;
        // this.showRect();
        let tempBall = containerBall.getChildByName('ball_white');
        if (tempBall) {
            this._ballsRigid[0] = tempBall.getComponent(Laya.RigidBody);
        }
        for (let i = 1, l = 16; i < l; ++i) {
            tempBall = containerBall.getChildByName(`ball_${10 > i ? `0${i}` : i}`);
            if (tempBall) {
                this._ballsRigid[i] = tempBall.getComponent(Laya.RigidBody);
            }
            else {
                this._ballsRigid[i] = undefined;
            }
        }
        // 反正这个是判断有没有在动的, 跟着帧走应该差不多
        // 一秒一次某些时候等待太久
        Laya.timer.frameLoop(30, this, this.calculateBallStatue);
    }
    onDisable() {
        Laya.timer.clear(this, this.calculateBallStatue);
    }
    calculateBallStatue() {
        let isRunning = false;
        for (let key of Object.keys(this._ballsRigid)) {
            if (this._ballsRigid[key]) {
                const { x: currentX, y: currentY } = this._ballsRigid[key].linearVelocity;
                if (currentX && currentY) {
                    isRunning = true;
                }
            }
        }
        // 当所有球停止运动的时候, 触发个事件给外面
        if (this._isBallRunning && !isRunning) {
            this.event('ball.all.stop');
        }
        this._isBallRunning = isRunning;
    }
    getCollisionCoordinate() {
        return {
            startX: this._startX,
            startY: this._startY,
            endX: this._endX,
            endY: this._endY,
            middle: this._middle,
            middleLeft: this._middleLeft,
            middleRight: this._middleRight,
        };
    }
    /**
     * 展示碰撞框
     */
    showRect() {
        const line = new Laya.Sprite();
        line.graphics.drawRect(this._middle, 0, 2, 500, '#ff0000');
        line.graphics.drawRect(this._middleLeft, 0, 2, 500, '#ff0000');
        line.graphics.drawRect(this._middleRight, 0, 2, 500, '#ff0000');
        line.graphics.drawRect(this._startX, 0, 2, 500, '#ff0000');
        line.graphics.drawRect(this._endX, 0, 2, 500, '#ff0000');
        line.graphics.drawRect(0, this._startY, 900, 2, '#ff0000');
        line.graphics.drawRect(0, this._endY, 900, 2, '#ff0000');
        this.addChild(line);
    }
}
exports.default = Game;

},{"./../ui/layaMaxUI":7,"./GameControl":5}],5:[function(require,module,exports){
'use strict';
Object.defineProperty(exports, "__esModule", { value: true });
const Player_1 = require("./Player");
const initialPositionWhite = new Laya.Point(140, 208);
// 进球后在下方展示区域是否将角度回正 (我感觉不回正也挺好看的)
const isGoalRotationReset = true;
/**
 * 游戏控制脚本。定义了几个dropBox，bullet，createBoxInterval等变量，能够在IDE显示及设置该变量
 * 更多类型定义，请参考官方文档
 */
class GameControl extends Laya.Script {
    constructor() {
        super();
        this._goal = {
            1: false,
            2: false,
            3: false,
            4: false,
            5: false,
            6: false,
            7: false,
            8: false,
            9: false,
            10: false,
            11: false,
            12: false,
            13: false,
            14: false,
            15: false,
        };
        this._flags = {
            goalThisTurn: [],
        };
    }
    onEnable() {
        this._containerBall = this.owner.getChildByName("container_ball");
        this._playerLeft = this.owner.getChildByName('player_left');
        this._playerRight = this.owner.getChildByName('player_right');
        this.addListeners();
    }
    onDisable() {
        this.removeListeners();
    }
    onStageClick(e) {
        //停止事件冒泡，提高性能，当然也可以不要
        e.stopPropagation();
        // 如果球在动, 就不让继续击球了
        if (this.owner.isBallRunning) {
            return;
        }
        // 这个是随机方向生成, 最早开发的时候用的, 现在早就用不到了
        // const x: number = (.5 < Math.random() ? 1 : -1) * Math.random() * 10;
        // const y: number = (.5 < Math.random() ? 1 : -1) * Math.random() * 10;
        let ball = this._containerBall.getChildByName('ball_white');
        const parent = ball.parent;
        const touchX = e.stageX;
        const touchY = e.stageY;
        const ballX = ball.x + parent.x;
        const ballY = ball.y + parent.y;
        const x = (touchX - ballX) / 20;
        const y = (touchY - ballY) / 20;
        // 这个是开发时用来判断点击位置和球运行方向用的, 现在已经算好了, 就先隐藏, 以后调试可以继续用
        // console.log(touchX, touchY, ballX, ballY, x, y);
        ball.startMove(x, y);
    }
    addListeners() {
        // this.owner.on('ball.goal', this, this.handlerGoal);
        // 因为使用事件系统会导致进球判定变成异步且会重入, 因而在这里改成了直接把函数定义上去的方法
        Object.defineProperty(this.owner, 'handlerGoal', {
            enumerable: false,
            value: (number) => this.handlerGoal(number),
        });
        this.owner.on('ball.all.stop', this, this.judgeShot);
    }
    removeListeners() {
        // this.owner.off('ball.goal', this, this.handlerGoal);
        Object.defineProperty(this.owner, 'handlerGoal', {
            enumerable: false,
        });
        this.owner.off('ball.all.stop', this, this.judgeShot);
    }
    handlerGoal(number) {
        if (0 === number) {
            console.log('白球进了');
            this._containerBall.getChildByName('ball_white').pos(initialPositionWhite.x, initialPositionWhite.y);
        }
        else if (!this._goal[number]) {
            console.log('进球！', number);
            this._goal[number] = true;
            // TODO 要计算下下方计分区位置在哪
            const ballName = `ball_${10 > number ? `0${number}` : number}`;
            const ball = this._containerBall.getChildByName(ballName);
            // 这个 removeSelf 除了直接写在 ball 里面, 否则都会因为时序问题执行多次, 这里为了代码好看, 多写了防重入逻辑
            ball.removeSelf();
            ball.pos(40 * (number - 1) + 30, 25);
            isGoalRotationReset && (ball.rotation = 0);
            this.owner.container_goal.addChild(ball);
        }
        this._flags.goalThisTurn.push(number);
    }
    judgeShot() {
        const goalThisTurn = this._flags.goalThisTurn;
        if (goalThisTurn.length) {
            if (-1 < goalThisTurn.indexOf(0)) {
                // TODO
                // 可能需要罚杆？
                // 是不是进球全不算？
            }
            if (-1 < goalThisTurn.indexOf(8)) {
                // TODO 8 号球进了怎么算
            }
            if (-1 < goalThisTurn.findIndex((number) => 0 !== number && 8 !== number)) {
                const playerLeft = this._playerLeft.getComponent(Player_1.default);
                const playerRight = this._playerRight.getComponent(Player_1.default);
                if (undefined === playerLeft.target && undefined === playerRight.target) {
                    // this._playerCurrent
                    const firstBall = goalThisTurn.find((number) => 0 !== number && 8 !== number);
                    if ((0 === this._playerCurrent && 8 > firstBall) || (1 === this._playerCurrent && 8 < firstBall)) {
                        // 左玩家进了整球, 或者右玩家进了半球, 就是左整右半
                        playerLeft.target = 0;
                        playerRight.target = 1;
                    }
                    else {
                        // 否则就是左半右整
                        playerLeft.target = 1;
                        playerRight.target = 0;
                    }
                }
            }
            this._flags.goalThisTurn = [];
        }
        this._playerCurrent = 0 === this._playerCurrent ? 1 : 0;
    }
}
exports.default = GameControl;

},{"./Player":6}],6:[function(require,module,exports){
'use strict';
Object.defineProperty(exports, "__esModule", { value: true });
class Player extends Laya.Script {
    get target() {
        return this._target;
    }
    set target(val) {
        this._target = val;
        console.log('target', val);
        if (0 === val) {
            // (this.owner.getChildByName('container_ball') as Laya.Sprite).texture = 'game/balls/ball_01.png';
            this.owner.getChildByName('target').skin = 'game/balls/ball_01.png';
        }
        else if (1 === val) {
            this.owner.getChildByName('target').skin = 'game/balls/ball_09.png';
        }
    }
    constructor() {
        super();
    }
    onEnable() {
        const elName = this.owner.getChildByName('name');
        const elAvatar = this.owner.getChildByName('avatar');
        const elMask = new Laya.Sprite();
        // 注意, arcTo 的端点 1 是两端点位置切线的交点
        var path = [
            ["moveTo", 10, 0],
            ['lineTo', 40, 0],
            ["arcTo", 50, 0, 50, 10, 10],
            ['lineTo', 50, 40],
            ["arcTo", 50, 50, 40, 50, 10],
            ['lineTo', 10, 50],
            ["arcTo", 0, 50, 0, 40, 10],
            ['lineTo', 0, 10],
            ["arcTo", 0, 0, 10, 0, 10],
        ];
        elMask.graphics.drawPath(0, 0, path, { fillStyle: '#ff0000' });
        elMask.pos(0, 0);
        // this.owner.addChild(elMask);
        elAvatar.mask = elMask;
        if (this.avatar) { }
    }
}
exports.default = Player;

},{}],7:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var ui;
(function (ui) {
    var game;
    (function (game) {
        class GameUI extends Laya.Scene {
            constructor() { super(); }
            createChildren() {
                super.createChildren();
                this.loadScene("game/Game");
            }
        }
        game.GameUI = GameUI;
        class HoleUI extends Laya.View {
            constructor() { super(); }
            createChildren() {
                super.createChildren();
                this.loadScene("game/Hole");
            }
        }
        game.HoleUI = HoleUI;
    })(game = ui.game || (ui.game = {}));
})(ui = exports.ui || (exports.ui = {}));

},{}]},{},[2])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
